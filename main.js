/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => OrdenarArchivosPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  metricas: []
};
var OrdenarArchivosPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.app.workspace.onLayoutReady(() => {
      var _a;
      this.dv = (_a = this.app.plugins.plugins["dataview"]) == null ? void 0 : _a.api;
    });
    for (let metrica of this.settings.metricas) {
      this.agregarMetrica(metrica);
    }
    this.registerDomEvent(document, "keydown", async (event) => {
      if (event.code == "KeyL" && this.modal) {
        await this.modal.establecerComparacion("der");
      } else if (event.code == "KeyJ" && this.modal) {
        await this.modal.establecerComparacion("izq");
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  agregarMetrica(metrica) {
    this.addCommand({
      id: `open-reordenar-${this.tenerMetricaId(metrica)}`,
      name: `Reordenar ${metrica}`,
      callback: async () => {
        if (this.modal) {
          await this.modal.onClose();
          this.modal.close();
        }
        this.modal = new ReordenarModal(this.app, this.dv, metrica);
        await this.modal.open();
      }
    });
  }
  eliminarMetrica(metrica) {
    this.removeCommand(`open-reordenar-${this.tenerMetricaId(metrica)}`);
  }
  tenerMetricaId(metrica) {
    metrica = metrica.trim();
    let resultado = "";
    for (let i = 0; i < metrica.length; i++) {
      resultado += metrica[i] == " " ? "-" : metrica.charAt(i);
    }
    return resultado;
  }
};
var ReordenarModal = class extends import_obsidian.Modal {
  constructor(app, dv, metrica) {
    super(app);
    this.metrica = metrica;
    this.component = new import_obsidian.Component();
    this.archivos = dv.pages().filter((archivo) => archivo[this.metrica]).sort((archivo) => archivo[this.metrica]).map((archivo) => ({
      path: archivo.file.path,
      name: archivo.file.name,
      metrica: archivo[metrica]
    }));
    this.ultima = [];
  }
  async onOpen() {
    const { contentEl } = this;
    this.component.load();
    this.setTitle(`Seleccionar cual es mejor seg\xFAn "${this.metrica}"`);
    this.modalEl.addClass("ordenar-ventana");
    [this.indiceIzq, this.indiceDer] = this.conseguirArchivos();
    let [archivoUno, archivoDos] = [this.indiceDer, this.indiceIzq].map((indice) => this.archivos[indice]);
    let [tArchivoUno, tArchivoDos] = [archivoUno, archivoDos].map((archivo) => this.app.vault.getAbstractFileByPath(archivo.path));
    let [contenidoUno, contenidoDos] = (await Promise.all([
      this.app.vault.read(tArchivoUno),
      this.app.vault.read(tArchivoDos)
    ])).map((contenido) => this.sacarFrontmatter(contenido));
    let separacion = contentEl.createDiv();
    separacion.addClass("ordenar-separacion");
    let divIzquierda = new import_obsidian.ButtonComponent(separacion).setClass("ordenar-archivo").onClick(async () => await this.establecerComparacion("izq")).buttonEl;
    let tareaIzquierda = import_obsidian.MarkdownRenderer.render(
      this.app,
      `# ${archivoUno.name}
---
${contenidoUno}`,
      divIzquierda.createDiv({ cls: "ordenar-archivo-contenido" }),
      archivoUno.path,
      this.component
    );
    let divDerecha = new import_obsidian.ButtonComponent(separacion).setClass("ordenar-archivo").onClick(async () => await this.establecerComparacion("der")).buttonEl;
    let tareaDerecha = import_obsidian.MarkdownRenderer.render(
      this.app,
      `# ${archivoDos.name}
---
${contenidoDos}`,
      divDerecha.createDiv({ cls: "ordenar-archivo-contenido" }),
      archivoDos.path,
      this.component
    );
    await Promise.all([tareaIzquierda, tareaDerecha]);
  }
  async onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.component.unload();
    if (!this.ultima)
      return;
    let tareas = this.ultima.map((indice) => this.archivos[indice]).map(({ path, name, metrica }) => {
      let tArchivo = this.app.vault.getAbstractFileByPath(path);
      return this.app.fileManager.processFrontMatter(tArchivo, (frontmatter) => {
        frontmatter[this.metrica] = metrica;
      });
    });
    await Promise.all(tareas);
  }
  async establecerComparacion(dir) {
    let indiceMejor = dir == "der" ? this.indiceDer : this.indiceIzq;
    let indicePeor = dir == "der" ? this.indiceIzq : this.indiceDer;
    let metricaMejor = this.archivos[indiceMejor].metrica;
    let metricaPeor = this.archivos[indicePeor].metrica;
    if (parseInt(metricaMejor, 10) > parseInt(metricaPeor, 10)) {
      this.archivos[indiceMejor]["metrica"] = metricaPeor;
      this.archivos[indicePeor]["metrica"] = metricaMejor;
    }
    await this.onClose();
    this.onOpen();
  }
  sacarFrontmatter(contenido) {
    if (contenido.slice(0, 3) != "---")
      return contenido;
    contenido = contenido.slice(3);
    let indice = contenido.indexOf("---");
    indice += contenido.slice(indice).indexOf("\n") + 1;
    return contenido.slice(indice);
  }
  conseguirArchivos() {
    let indicePrincipal, indiceSecundario;
    do {
      indicePrincipal = Math.floor(Math.random() * this.archivos.length);
      indiceSecundario = indicePrincipal == 0 ? 1 : indicePrincipal - 1;
    } while (this.ultima.length > 0 && (this.ultima[0] == indicePrincipal && this.ultima[1] == indiceSecundario || this.ultima[1] == indicePrincipal && this.ultima[0] == indiceSecundario));
    this.ultima[0] = indicePrincipal;
    this.ultima[1] = indiceSecundario;
    return this.archivos[indicePrincipal].metrica < this.archivos[indiceSecundario].metrica ? [indicePrincipal, indiceSecundario] : [indiceSecundario, indicePrincipal];
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Configuraci\xF3n" });
    if (!this.plugin.dv) {
      containerEl.createEl("span", { text: "No se tiene instalado Dataview" });
      return;
    }
    let posiblesMetricas = this.obtenerMetricas();
    if (posiblesMetricas.length == 0) {
      containerEl.createEl("span", { text: "No hay posibles metricas para elegir" });
      return;
    }
    if (this.plugin.settings.metricas.length > 0) {
      for (let [indice, metrica] of this.plugin.settings.metricas.entries()) {
        new import_obsidian.Setting(containerEl).setName(`Setting #${indice + 1}`).setDesc("It's a secret").addDropdown((dropdown) => {
          for (let otrasMetrica of posiblesMetricas) {
            if (otrasMetrica != metrica && this.plugin.settings.metricas.indexOf(otrasMetrica) >= 0)
              continue;
            dropdown = dropdown.addOption(otrasMetrica, otrasMetrica);
          }
          dropdown = dropdown.onChange(async (value) => {
            if (metrica)
              this.plugin.eliminarMetrica(metrica);
            this.plugin.settings.metricas[indice] = value;
            this.plugin.agregarMetrica(value);
            await this.plugin.saveSettings();
          }).setValue(metrica);
          return dropdown;
        });
      }
    }
    let botones = containerEl.createDiv();
    botones.addClass("ordenar-botones");
    if (this.plugin.settings.metricas.length > 0) {
      new import_obsidian.ButtonComponent(botones).setClass("ordenar-boton").setButtonText("Eliminar m\xE9trica").setTooltip("Apretar").onClick(async () => {
        new import_obsidian.Notice("Eliminando");
        let metrica = this.plugin.settings.metricas.pop();
        if (metrica && metrica.trim() != "") {
          this.plugin.eliminarMetrica(metrica);
        }
        await this.plugin.saveSettings();
        this.display();
      });
    }
    if (posiblesMetricas.length > this.plugin.settings.metricas.length) {
      new import_obsidian.ButtonComponent(botones).setClass("ordenar-boton").setButtonText("Agregar m\xE9trica").setTooltip("Apretar").onClick(async () => {
        new import_obsidian.Notice("Agregando");
        let metricaNoUsada = posiblesMetricas.find((metrica) => this.plugin.settings.metricas.indexOf(metrica) < 0);
        this.plugin.settings.metricas.push(metricaNoUsada ? metricaNoUsada : "");
        this.plugin.agregarMetrica(metricaNoUsada ? metricaNoUsada : "");
        await this.plugin.saveSettings();
        this.display();
      });
    }
  }
  obtenerMetricas() {
    var _a;
    return (_a = this.plugin.dv) == null ? void 0 : _a.pages().flatMap((archivo) => Object.entries(archivo.file.frontmatter).map(([key, value]) => key)).groupBy((key) => key).filter(({ key, rows }) => rows.length > 2).map(({ key, rows }) => key).values;
  }
};
//# sourceMappingURL=data:application/json;base64,
